import requests
import boto3
from requests.auth import HTTPBasicAuth
from xlutils.copy import copy
import time
from xlrd import *
import xlrd
from get_details import GetDetails
import threading
from difflib import SequenceMatcher
import json
import os
import logging

logging.basicConfig()
LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.INFO)

class PostPDF(object):
   
    def __init__(self):
        try:
            LOGGER.info('Init method started for PostPDF')
            config_file_path = 'script_property.json'
            properties = json.loads(open(config_file_path).read())
            self.access_key = properties["access_key"] 
            self.secret_key = properties["secret_key"]
            self.certificate_path = properties["certificate_path"]
            self.username = properties["username"]
            self.password = properties["password"]
            self.bucket_name = properties["bucket_name"]
            self.s3_path = properties["s3_path"]
            self.excelpath = properties["excelpath"]
            self.s3_download_local_path = properties["s3_download_local_path"]			
            self.client = boto3.client('s3',aws_access_key_id=self.access_key, aws_secret_access_key=self.secret_key)
            self.resource = boto3.resource('s3',aws_access_key_id=self.access_key, aws_secret_access_key=self.secret_key)
            LOGGER.info('Init method completed for PostPDF')
        except Exception as ex:
            print "Exception at PostPDF class - start init: ",ex 
            
    def s3_file_download(self):
		self.s3_files_download(self.client, self.resource, self.s3_path, self.s3_download_local_path, self.bucket_name)
			
    def s3_files_download(self, client, resource, s3_path, s3_download_local_path, bucket_name):
        try:        
            #client = boto3.client('s3',aws_access_key_id=self.access_key, aws_secret_access_key=self.secret_key)
            #resource = boto3.resource('s3',aws_access_key_id=self.access_key, aws_secret_access_key=self.secret_key)
            #resource.Bucket(self.bucket_name).download_dir(self.s3_path,self.s3_download_path)
            paginator = client.get_paginator('list_objects')
            for result in paginator.paginate(Bucket=bucket_name, Delimiter='/', Prefix=s3_path):
                print result
                if result.get('CommonPrefixes') is not None:
                    for subdir in result.get('CommonPrefixes'):
                        print subdir.get('Prefix')
                        self.s3_files_download(client, resource, subdir.get('Prefix'), s3_download_local_path, bucket_name)
                if result.get('Contents') is not None:
                    for file in result.get('Contents'):
                        if not os.path.exists(os.path.dirname(s3_download_local_path + os.sep + file.get('Key'))):
                            os.makedirs(os.path.dirname(s3_download_local_path + os.sep + file.get('Key')))
                        print 'File: ', file
                        print 'Download: ', file.get('Key')
                        if file.get('Key').find('.') > -1:
                            resource.meta.client.download_file(bucket_name, file.get('Key'), s3_download_local_path + os.sep + file.get('Key'))
            LOGGER.info('s3 files download completed')
        except Exception as ex:
            print "Exception at PostPDF class - start init: ",ex 

postpdf = PostPDF()
postpdf.s3_file_download()
